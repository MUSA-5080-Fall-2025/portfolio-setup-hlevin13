install.packages("tidyverse")
install.packages("tidycensus")
install.packages("sf")
install.packages("regal")
install.packages("tidy")
readRenviron("~/.Renviron")
install.packages("tidycensus") ##here, you will be prompted with "yes/no/cancel" -- type no
install.packages("tidyverse")
install.packages("dplyr") # likely superfluous as tidyverse includes dplyr -- but good practice!
install.packages("sf")
install.packages("janitor")
library(tidycensus)
census_api_key(key = "5a82e243438bea307ae1c04f150d539c4db5fa47")
census_api_key(key = "5a82e243438bea307ae1c04f150d539c4db5fa47", install = TRUE)
# Load libraries
library(tidycensus)
library(tidyverse)
# Set your Census API key (get one at https://api.census.gov/data/key_signup.html)
# Replace with your actual key
census_api_key(5a82e243438bea307ae1c04f150d539c4db5fa47, install = TRUE)
# Set your Census API key (get one at https://api.census.gov/data/key_signup.html)
# Replace with your actual key
census_api_key("5a82e243438bea307ae1c04f150d539c4db5fa47", install = TRUE)
# Define the variables of interest from ACS 5-Year Estimates
# Table IDs used from 2020 ACS 5-year estimates
variables <- c(
total_pop = "B01003_001",
white = "B02001_002",
black = "B02001_003",
asian = "B02001_005",
hispanic = "B03003_003",
foreign_born = "B05002_013",
poverty = "B17001_002",
)
_002"
# Define the variables of interest from ACS 5-Year Estimates
# Table IDs used from 2020 ACS 5-year estimates
variables <- c(
total_pop = "B01003_001",
white = "B02001_002",
black = "B02001_003",
asian = "B02001_005",
hispanic = "B03003_003",
foreign_born = "B05002_013",
poverty = "B17001_002"
)
# Get ACS data for Queens County, NY
data <- get_acs(
geography = "tract",
variables = variables,
state = "NY",
county = "Queens",
year = 2022,
survey = "acs5",
output = "wide"
)
# Filter for the specified tracts
data_filtered <- data %>%
filter(substr(GEOID, 6, 10) %in% tracts) %>%
select(GEOID, NAME, ends_with("E")) %>%
rename_with(~str_remove(., "_E$"))
# View the results
print(data_filtered)
# Filter for the specified tracts
data_filtered <- data %>%
filter(substr(GEOID, 6, 10) %in% tracts) %>%
select(GEOID, NAME, ends_with("E")) %>%
rename_with(~str_remove(., "_E$"))
git branch
# Load required packages
library(sf)
library(tidyverse)
library(tigris)
library(tidycensus)
library(scales)
library(patchwork)
library(here)
library(dplyr)
library(knitr)
library(ggplot2)
# Census API key
census_api_key(Sys.getenv("CENSUS_API_KEY"), install = FALSE)
#| message: false
#| warning: false
#| echo: true
# Load spatial data
pa_counties <- st_read("data/Pennsylvania_County_Boundaries.shp")
hospitals <- st_read("data/hospitals.geojson")
census_tracts <- tracts(state = "PA", cb = TRUE)
# Questions to answer:
hospitals %>%
group_by(FACILITY_N) %>%
summarise(count = n())
census_tracts %>%
group_by(GEOID) %>%
summarise(count = n())
st_crs(pa_counties)
st_crs(hospitals)
st_crs(census_tracts)
# Get demographic data from ACS
pa_tract_data <- get_acs(
geography = "tract",
state = "Pennsylvania",
variables = c(
total_population = "B01003_001",
median_income = "B19013_001",
over_65 = "B01001_020"),
survey = "acs5",
year = 2022,
output = "wide"
)
# Join to tract boundaries
census_tracts <- census_tracts %>%
left_join(pa_tract_data, by = "GEOID")
# Questions to answer:
pa_tract_data %>%
filter(is.na(median_incomeE)) %>%
count()
median(pa_tract_data$median_incomeE, na.rm = TRUE)
# Filter for vulnerable tracts based on your criteria
income_threshold <- quantile (
census_tracts$median_incomeE, 0.25, na.rm = TRUE)
# $55,924
census_tracts <- census_tracts %>%
mutate(pct_over_65 = (over_65E / total_populationE) *100)
age_threshold <- quantile (
census_tracts$pct_over_65, 0.75, na.rm = TRUE)
vulnerable_pop <- census_tracts %>%
filter(
median_incomeE < income_threshold,
pct_over_65 > age_threshold
)
vulnerable_pop <- vulnerable_pop %>%
mutate(
vulnerable = median_incomeE < income_threshold & pct_over_65 > age_threshold
)
# Transform to appropriate projected CRS
vulnerable_pop <- st_transform(vulnerable_pop, crs = 3365)
hospitals <- st_transform(hospitals, crs = 3365)
# Calculate distance from each tract centroid to nearest hospital
tract_centroid <- st_centroid(vulnerable_pop)
distance_matrix <- st_distance(tract_centroid, hospitals)
vulnerable_pop <- vulnerable_pop %>%
mutate(
hospital_dis = apply(distance_matrix, 1, min),
hospital_miles = as.numeric(hospital_dis) / 1609.34)
# Questions to answer
vulnerable_pop %>%
summarise(
avg_distance = mean(hospital_miles, na.rm = TRUE),
max_distance = max(hospital_miles, na.rm = TRUE),
over_15 = sum(hospital_miles > 15, na.rm = TRUE)
)
# Create underserved variable
vulnerable_pop <- vulnerable_pop %>%
mutate(
underserved = hospital_miles > 15 & median_incomeE < income_threshold & pct_over_65 > age_threshold
)
# Questions to answer
vulnerable_pop %>%
summarise(
underserved_count = sum(underserved, na.rm = TRUE),
total_tracts = n (),
underserved_pct = (underserved_count/total_tracts)*100
)
# Spatial join tracts to counties
pa_counties <- st_transform(pa_counties, crs = 3365)
vulnerable_pop <- st_transform(vulnerable_pop, crs = 3365)
tracts_with_counties <- vulnerable_pop %>%
st_join(pa_counties %>% select(COUNTY_NAM))
# Aggregate statistics by county
county_stats <- tracts_with_counties %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarise(
total_tracts = n(),
vulnerable_num = sum(vulnerable, na.rm = TRUE),
underserved_num = sum(underserved, na.rm =TRUE),
pct_underserved = (underserved_num/vulnerable_num)*100,
hosp_dist = mean(hospital_miles, na.rm = TRUE),
total = sum (total_populationE, na.rm = TRUE)
) %>%
ungroup()
# Create and format priority counties table
priority_counties <- county_stats %>%
arrange(desc(hosp_dist)) %>%
slice(1:10) %>%
select(COUNTY_NAM, total_tracts, total, pct_underserved, hosp_dist)
kable(priority_counties,
col.names = c("County", "Vulnerable Tracts", "Total Population", "Underserved Vulnerable Tracts (%)", "Distance to Nearest Hospital (mi)"),
caption = "Top 10 Priority Counties for Healthcare Investment",
format.args = list(big.mark = ",")
)
# Create county-level access map
county_map <- pa_counties %>%
st_transform(crs = st_crs(vulnerable_pop)) %>%
left_join(county_stats, by = "COUNTY_NAM")
hospitals <- st_transform(hospitals, crs = 3365)
ggplot() +
geom_sf(data = county_map,
aes(fill = pct_underserved),
color = "black", size = .25) +
geom_sf(data = hospitals,
color = "white",
size = 1) +
scale_fill_viridis_c(
name = "Percent Underserved",
option = "magma"
) +
labs(
title = "Healthcare Disparity Across Pennsylvania",
subtitle = "Percent of vulnerable census tracts underserved by county",
caption = "Source: ACS 2022 5-Year Estimates"
) +
theme_void()
# Create detailed tract-level map
vulnerable_pop <- vulnerable_pop %>%
mutate(
underserved_flag = ifelse (underserved == TRUE, "Underserved", "Other")
)
unique(vulnerable_pop$underserved_flag)
ggplot () +
geom_sf(data = vulnerable_pop,
aes(fill = underserved_flag),
color = "grey")+
geom_sf(data = pa_counties,
fill = NA,
color = "black",
size = 0.5) +
geom_sf(data = hospitals,
size = 2,
shape = 21,
fill = "cornflowerblue")+
scale_fill_manual(values = c("Underserved" = "orchid",
"Other" = "darkorange"),
name = "Vulnerability Status")+
labs(
title = "Underserved Vulnerable Tracts in Pennsylvania",
subtitle = "Census Tracts with Limited Access to Hospitals",
caption = "Source: ACS 2022 5-Year Estimates"
)+
theme_void()
# Create distribution visualization
ggplot(vulnerable_pop, aes(x = hospital_miles)) +
geom_histogram(bins = 15, fill = "steelblue", alpha = 0.7) +
labs(
title = "Distribution of Distances to Nearest Hospital in Pennsylvania",
subtitle = "A clear disparity exists with some census tracts being 50+ miles from the nearest hospital",
x = "Distance to Nearest Hospital (mi)",
y = "Number of Tracts",
caption = "Source: ACS 2022 5-Year Estimates"
)+
theme_minimal()
# Load your additional dataset
schools <- st_read("step_7_data/Schools.geojson")
# OpenDataPhilly: unknown
crime <- st_read("step_7_data/crime_2022/incidents_part1_part2.shp")
# OpenDataPhilly; 2022
schools <- st_transform(schools, crs = 3365)
crime <- st_transform(crime, crs = 3365)
summary(schools)
summary(crime)
# Your spatial analysis
# Set CRS
schools <- st_transform(schools, crs = 3365)
crime <- st_transform(crime, crs = 3365)
# Create 1000ft buffers around each school to represent the safety zones
school_buffer <- schools %>%
st_buffer (dist = 1000) %>%
st_union() %>%
st_as_sf()
# Determine crimes within buffers/safety zones
crime_near_school <- st_join(
crime, school_buffer,
join = st_within, left = FALSE
)
# Count total crimes and the number that happened near schools
crime_total <- nrow(crime)
crime_schoolzone <- nrow(crime_near_school)
# Find percent of crimes near schools
crime_percent <- round((crime_schoolzone / crime_total) *100, 2)
# Results
cat("Total Crimes:", crime_total, "\n")
cat("Crimes within 1000ft of schools:", crime_schoolzone, "\n")
cat("Percent of crimes within 1000ft of schools:", crime_percent, "%\n")
# Map
ggplot() +
geom_sf(data = crime,
color = "tomato",
size = .5,
alpha = .1) +
geom_sf(data = school_buffer,
fill = "navyblue",
alpha = .8) +
geom_sf(data = schools,
color = "deepskyblue3",
size = 1) +
labs(
title = "School Safety Zones and Crime in Philadelphia, PA",
subtitle = "1000ft Safety Buffer Around Schools and Locations of Crime",
caption = "Source: OpenDataPhilly") +
theme_void()
install.packages("stargazer")
