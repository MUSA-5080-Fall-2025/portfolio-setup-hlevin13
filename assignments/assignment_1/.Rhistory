# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("5a82e243438bea307ae1c04f150d539c4db5fa47", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "New York"
# Write your get_acs() code here
ny_county <- get_acs(
geography = "county",
state = my_state,
variables = c(median_h_income = "B19013_001", total_population = "B01003_001"),
survey = "acs5",
year = 2022,
output = "wide"
)
# Look at the first few rows
head(ny_county)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
ny_clean <- ny_county %>%
mutate(NAME = str_remove (NAME, "County, New York"))
# Display the first few rows
head(ny_clean)
# Calculate MOE percentage and reliability categories using mutate()
ny_reliability <- ny_clean %>%
mutate(
moe_percentage = round((median_h_incomeM/median_h_incomeE) * 100, 2),
reliability = case_when(
moe_percentage < 5 ~ "High Confidence",
moe_percentage >= 5 & moe_percentage <= 10 ~ "Moderate Confidence",
moe_percentage > 10 ~ "Low Confidence")
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
reliability_summary <- ny_reliability %>%
count(reliability) %>%
mutate(percentage = round(100*n/sum(n), 1))
head(reliability_summary)
# Create table of top 5 counties by MOE percentage
high_moe <- ny_reliability %>%
slice(1:5) %>%
arrange(desc(moe_percentage)) %>%
select(NAME, median_h_incomeE, (median_h_incomeM/median_h_incomeE), moe_percentage, reliability)
#ASK IN OFFICE HOURS ABOUT SLICE FUNCTION
# Format as table with kable() - include appropriate column names and caption
kable(high_moe,
col.names = c("County", "Median Household Income", "Margin of Error", "MOE Percent", "Reliability"),
caption = "Top 5 NY Counties with Highest Median Household Income Uncertainity",
format.args = list(big.mark = ",")
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties <- ny_reliability %>%
filter(NAME %in% c("Albany ", "Essex ", "Hamilton "))
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties %>%
select(
County = NAME,
Median_Income = median_h_incomeE,
MOE_Percentage = moe_percentage,
Reliability = reliability
)
# Define your race/ethnicity variables with descriptive names
raceVariables <- c(White = "B03002_003",
Black = "B03002_004",
Hispanic = "B03002_012",
Total = "B03002_001")
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
censusTracts <- c("001","031","041")
acsData <- get_acs(
geography = "tract",
state = "NY",
county = censusTracts,
variables = raceVariables,
survey = "acs5",
year = 2022,
output = "wide"
)
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
group_percents <- acsData %>%
mutate(
white_percentage = round((WhiteE / TotalE) * 100),
black_percentage = round((BlackE / TotalE) * 100),
hispanic_percentage = round((HispanicE / TotalE) * 100)
)
# Add readable tract and county name columns using str_extract() or similar
group_percents <- group_percents %>%
mutate(NAME= str_extract(NAME, "Albany|Essex|Hamilton")
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
hispanic_pop <- group_percents %>%
arrange(desc(hispanic_percentage)) %>%
slice(1) %>%
select(NAME, HispanicE, TotalE, hispanic_percentage)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
averages <- group_percents %>%
group_by(NAME) %>%
summarize(
tracts = n(),
avg_white_percent = round(mean(white_percentage, na.rm = TRUE), 0),
avg_black_percent = round(mean(black_percentage, na.rm = TRUE), 0),
avg_hispanic_percent = round(mean(hispanic_percentage, na.rm = TRUE), 0)
)
# Create a nicely formatted table of your results using kable()
kable(averages,
col.names = c("County", "Number of Tracts", "Avg White %", "Avg Black %", "Avg Hispanic %"),
caption = "Average Percent of White, Black, and Hispanic Populations in Selected Counties",
format.args = list(big.mark = ",")
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
race_moe <- group_percents %>%
mutate(
white_moe = round((WhiteM/WhiteE)*100, 2),
black_moe = round((BlackM/BlackE)*100, 2),
hispanic_moe = round(HispanicM/HispanicE*100, 2),
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
race_moe <- race_moe %>%
mutate(
high_moe = ifelse(
white_moe > 15 | black_moe > 15 | hispanic_moe > 15,
TRUE,
FALSE
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
race_moe_summary <- race_moe %>%
count(high_moe) %>%
mutate(percentage = round(100*n/sum(n),1))
# Create summary statistics showing how many tracts have data quality issues
race_moe_summary
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
pattern_analysis <- race_moe %>%
group_by(high_moe) %>%
summarize(
n_tracts = n(),
avg_white = round(mean(white_moe, na.rm = TRUE), 0),
avg_black = round(mean(black_moe, na.rm = TRUE), 0),
avg_hispanic = round(mean(hispanic_moe, na.rm = TRUE), 0),
avg_pop = round(mean(TotalE, na.rm = TRUE), 0)
)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
kable(pattern_analysis,
col.names = c("High MOE", "Number of Tracts", "Avg White MOE", "Avg Black MOE", "Avg Hispanic MOE", " Avg Pop"),
caption = "Comparison of Selected Tracts by MOE Reliability",
format.args = list(big.mark = ",")
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
specific_recommendations <- ny_reliability %>%
select(NAME, median_h_incomeE, moe_percentage, reliability) %>%
mutate(
algorithm_rec = case_when(
reliability == "High Confidence" ~ "Safe for algorithmic decisions",
reliability == "Moderate Confidence" ~ "Use with caution - monitor outcomes",
reliability == "Low Confidence" ~ "Requires manual review or additional data"
)
)
# Format as a professional table with kable()
kable(specific_recommendations,
col.names = c("County", "Median Household Income", "MOE", "Reliability Interpretation", "Algorithm Recommendation"),
caption = "Decision Framework for Algorithm Implementation Across New York State Counties",
format.args = list(big.mark = ",")
)
